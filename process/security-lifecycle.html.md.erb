---
title: PCF Testing, Release, and Security Lifecycle
owner: Security
---

<strong><%= modified_date %></strong>

This topic explains how Pivotal’s development practices, automated build tools, and organizational structures work together to create and support stable releases of Pivotal Cloud Foundry (PCF).

## Summary 
<!-- This used to read "Key Takeaways," but I thought that language was more marketing-facing than documentation-appropriate -->
* PCF follows a disciplined software development lifecycle that builds in quality and reduces feedback cycle time for teams producing system components. 
* Every PCF release follows a strict workflow and passes through numerous quality and compliance gates before distribution. 
* Tests are built into the product from the moment code is added, and run automatically with any code change.

## Release Mechanics
### Versioning
Pivotal numbers PCF releases following a [semantic versioning](http://semver.org/) style format, _X.Y.Z_, where _X_ and _Y_ indicate major and minor releases, and _Z_ designates patch releases. Major and minor releases change PCF functionality, while patch releases are backward-compatible security patches or bug fixes.

### Support
As of PCF 1.8, Pivotal supports each major and minor PCF release for a duration determined as follows:

* Pivotal supports the release for at least 9 months following its first publication date.
* Pivotal supports the last three major or minor releases, even if this extends coverage beyond 9 months. 

Versions of PCF prior to 1.8 are subject to a different support lifecycle policy. Pivotal projects supporting PCF versions 1.8, 1.7, and 1.6 as follows: 

<!-- I changed these column names for clarity -->

<table class="nice">
<th>PCF Release</th>
<th>Release Date</th>
<th>End of Support</th>
<th>Lifecycle</th>
<tr>
	<td>1.8.x</td>
	<td>8/29/16</td>
	<td>6/30/17</td>
	<td>9 months (projected)</td>
</tr>
<tr>
	<td>1.7.x</td>
	<td>4/29/16</td>
	<td>4/30/17</td>
	<td>12 months (projected, likely longer)</td>
</tr>
<tr>
	<td>1.6.x</td>
	<td>10/26/15</td>
	<td>4/30/17</td>
	<td>> 12 months</td>
</tr>
</table>

Support includes maintenance updates and upgrades, bug and security fixes, and technical assistance. The [Pivotal Support Policy](https://pivotal.io/support/lifecycle_policy) describes support (“General Support”) and related guidance and publication phases in more detail. The Pivotal Support Services [Terms and Conditions](https://pivotal.io/support/support_terms_conditions) defines Pivotal support in legal terms.

### Patch Releases
Patch releases are more frequent and less predictable than major/minor releases. The v1.6.x line provides a good example of their frequency. PCF 1.6.1 first posted on October 26, 2015. Through August 2016, 36 additional patches of Elastic Runtime 1.6.x and 18 patches of Ops Manager 1.6.x provided security and bug fixes to customers.

Each release is accompanied by release notes for [Ops Manager](../../pcf-release-notes/opsmanager-rn.html) and [Elastic Runtime](../../pcf-release-notes/runtime-rn.html) 
which document the security and bug fixes that they include. If a patch release contains security fixes in core Cloud Foundry code or in packaged dependencies, the release notes call them out using security identifiers from Common Vulnerabilities and Exposures (CVE), Ubuntu Security Notices (USN), and other 3rd party sources. Additionally, [pivotal.io/security](https://pivotal.io/security) maintains a running list of security fixes in PCF and PCF dependencies.

### Upgrading
All PCF releases pass through extensive testing that includes automated unit, integration, and acceptance tests on multiple IaaSs. But Pivotal recommends that customers test major and minor releases in a non-production environment first, to gain confidence that they function well. The test environment should be similar to the production environment. The customer should upgrade their production environment soon after they validate the new release on their test environment, to keep all PCF software components up-to-date.

## Release Testing, Integration, and Validation

### Test-Driven Development
Pivotal’s development process relies on a strict workflow with continuous automated testing and integration. Pivotal R&D does not separate Dev and QE teams. Rather, every Pivot on each engineering team owns quality, and writes tests for all of the software components that they develop, often before writing the component software itself.

With every software change, automated build pipelines trigger these tests for the component itself and for everything it touches. If a new code check-in does not pass its tests or causes a failure elsewhere, it pauses the build pipeline for the entire team, or sometimes all of Pivotal R&D. The resulting social pressure encourages developers to work together to address code issues quickly.

Pivotal applies the following automated testing approaches, scenarios, and frameworks to PCF components and to the release as a whole:

1.<strong>Unit tests</strong>: Development teams writes unit tests to express and validate desired functional behavior of product components. Typical frameworks used are [RSpec](http://rspec.info/) and [Ginkgo](https://onsi.github.io/ginkgo/). These tests are run continuously throughout the development cycle.
1.<strong>OSS integration tests</strong>: The Release Integration team exercises a full deployment of open-source Cloud Foundry to validate all end-user features. They maintain the [Cloud Foundry Acceptance Test](https://github.com/cloudfoundry/cf-acceptance-tests) (CATs) suite alongside the OSS cf-release, as new features are added and existing features refactored. Cloud Foundry component teams also contribute acceptance test suites at the OSS Integration Test level, to exercise and validate their components’ functional, performance, and integration health.
1.<strong>PCF integration tests</strong>: The PCF Release Engineering (RelEng) team validates the quality and cross-product integration health of the commercial PCF release. RelEng runs OSS Acceptance Tests against all supported releases on full PCF instances configured to represent diverse real-world customer scenarios on various IaaSs and using both internal and external load balancer, database, blobstore, and user store solutions.

### Additional Pre-Release Gates: Internal, PWS, and Compliance
In addition to its automated unit and integration testing, Pivotal deploys all upgrades slated for upcoming PCF releases on at-scale test environments. Prior to each Major or Minor commercial release, Pivotal runs the entire Pivotal Cloud Foundry Suite of services on several internally-managed large integration environments that run customer-like data and workloads.

Pivotal also pushes upcoming PCF feature upgrades and patches to its [Pivotal Web Services](http://run.pivotal.io/) platform, where customers continually deploy and host hundreds of mission-critical applications at scale, 24/7. The PWS environment gives Pivotal a continuous source of real-world usage and performance metrics that inform product development teams.

All PCF product teams participate in go-to-market steps for each release, as required for shipping a legally compliant product. Examples include [Open Source License File](https://network.pivotal.io/open-source) attribution and an Export Compliance classification.

## Patch Releases: Security and Bug Fixes

### Identifying Security Vulnerabilities
Pivotal has an established process to track and patch vulnerabilities in software dependencies and PCF software. Additionally, [pivotal.io/security](https://pivotal.io/security) describes a responsible disclosure process for reporting vulnerabilities identified in Pivotal software by 3rd parties.

Pivotal uses multiple methods to identify security vulnerabilities in Pivotal software and dependencies internally:

* Security notifications from [Canonical](http://www.canonical.com/) for their Ubuntu operating system, provided through Pivotal’s commercial relationship with Canonical.
* Software component scans, several times per day, using 3rd party security software which updates continuously from external security vulnerability sources.
* Dependency analysis software that identifies and catalogs software dependencies.
* Security vulnerability notifications from known software dependencies.

Pivotal also monitors externally-reported vulnerabilities from many sources:
* 3rd party security analysis requested by Pivotal.
* Cloud Foundry Foundation security notifications from member companies.
* Customer, prospect and other 3rd party security reports.

When Pivotal discovers a potential security vulnerability in PCF, the security team opens an issue to assess it. If it confirms the vulnerability for Pivotal software, Pivotal identifies and updates affected components for backporting to stable releases, following a target timeline based on the [severity level](../../customizing/pcf-security.html) of the vulnerability.

## Fix, Test, and Release Lifecycle
This flowchart details the steps that Pivotal performs on a typical high-priority CVE, to publish a patch release fix on [https://network.pivotal.io](https://network.pivotal.io):

<%= image_tag("triage-flowchart.png") %>